version: 0.2

phases:
  install:
    commands:
      - echo installing sonar-scanner
      - wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-3.2.0.1227-linux.zip
      - unzip sonar-scanner-cli-3.2.0.1227-linux.zip
      - chmod +x sonar-scanner-3.2.0.1227-linux/bin/sonar-scanner
  pre_build:
    commands:
      - aws --version
      - REGION=ap-south-1
      - echo $SOURCE_COMMIT
      - git checkout $SOURCE_COMMIT
      - ls -ltr
  build:
    commands:
      - echo code analysis started on `date`
      - result=$(sonar-scanner-3.2.0.1227-linux/bin/sonar-scanner -Dsonar.projectKey=phantom.pce.up4_portal -Dsonar.sources=src -Dsonar.host.url=https://sq.store-monit.com -Dsonar.login=21a3aaa52e9c03f9ad2ce187b6b801145c42d6d3 -Dsonar.projectName=UP4-Portal)
      - echo $result
  post_build:
    commands:
      - echo Build completed on `date`
      - sonar_link=$(echo $result | egrep -o "you can browse https://[^, ]+")      
      - sonar_task_id=$(echo $result | egrep -o "task\?id=[^ ]+" | cut -d'=' -f2)
      - echo "SonarQube task id is $sonar_task_id"
      - | # Allow time for SonarQube Background Task to complete
        stat="PENDING";
        while [ "$stat" != "SUCCESS" ]; do
          if [ $stat = "FAILED" ] || [ $stat = "CANCELLED" ]; then
            echo "SonarQube task $sonar_task_id failed";
            exit 1;
          fi
          stat=$(curl -u "21a3aaa52e9c03f9ad2ce187b6b801145c42d6d3:" https://sq.store-monit.com/api/ce/task\?id=$sonar_task_id | jq -r '.task.status');
          echo "SonarQube analysis status is $stat";
          sleep 5;
        done
      - sonar_analysis_id=$(curl -u "21a3aaa52e9c03f9ad2ce187b6b801145c42d6d3:" https://sq.store-monit.com/api/ce/task\?id=$sonar_task_id | jq -r '.task.analysisId')
      - echo $sonar_analysis_id        
      - quality_status=$(curl "21a3aaa52e9c03f9ad2ce187b6b801145c42d6d3:" https://sq.store-monit.com/api/qualitygates/project_status\?analysisId=$sonar_analysis_id | jq -r '.projectStatus.status')
      - echo $quality_status    
      - | # Verify qality statusu
        if [ $quality_status = "ERROR" ]; then
          echo " it is in error status "
          content=$(echo "SonarQube analysis complete. Quality Gate Failed.\n\nTo see why, $sonar_link");
          aws codecommit update-pull-request-approval-state --pull-request-id $PULL_REQUEST_ID --approval-state REVOKE --revision-id $REVISION_ID;
        elif [ $quality_status = "OK" ]; then
          echo " it is in ok status "
          content=$(echo "SonarQube analysis complete. Quality Gate Passed.\n\nFor details, $sonar_link");
          aws codecommit update-pull-request-approval-state --pull-request-id $PULL_REQUEST_ID --approval-state APPROVE --revision-id $REVISION_ID;
        else
          echo " it is in some other status "
          content="An unexpected error occurred while attempting to analyze with SonarQube.";
        fi   
      - echo $content
      - aws codecommit post-comment-for-pull-request --pull-request-id $PULL_REQUEST_ID --repository-name $REPOSITORY_NAME --before-commit-id $DESTINATION_COMMIT --after-commit-id $SOURCE_COMMIT --content "$content"